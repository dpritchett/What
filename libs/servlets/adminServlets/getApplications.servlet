{
	doGet : {
		parameters : [ ],
		method : function(request, response) {
		/*
			Get Web Container Context and Servlet Information to return to ExtJS Admin Page
		*/
			// Get Contexts collection
			var contexts = this.getServletContext().getAdminServices().getContexts();
			var rootNode = [];							// Create Root Node
			for(var i=0;i<contexts.length;i++) {		// Run through contexts
				var context = contexts[i];
				var servlets = context.getServlets();	// Get current context's servlet metadata collection
				var servletsNode = [];					// Create Servlets Node
				for(var j=0;j<servlets.length;j++) {	// Run through servlets collection
					var servlet = servlets[j];
					var servletConfig = servlet.servlet.getServletConfig();
					var servletName = servletConfig.getServletName();
					var servletParamNames = servlet.servlet.getServletConfig().getInitParameterNames();
					var servletParams = [];			// Create Servlet Init Param. Children Collection
					// Run through Servlet Init Params
					for(var s=0;s<servletParamNames.length;s++) {
						var sp = servletConfig.getInitParameter(servletParamNames[s]);
						var leaf = true;
						var children = null;
						if(typeof sp == 'object') {
							leaf = false;
							children = [];
							for(c in sp) children.push({
								text : c,
								iconCls : "attributeNode",
								description : sp[c],
								leaf : true,
								uiProvider: "col"
							});
						}
						// Push Servlet Init Param Leaf
						servletParams.push({
							text : servletParamNames[s],
							iconCls : "attributeNode",
							description : sp,
							uiProvider: "col",
							leaf : leaf,
							children : children
						});
					}
					var servletParametersNode = {
						text : "Servlet Init Parameters",
						iconCls : "attributeNode",
						children : servletParams
					};
					var statsNode = {					// Servlet Stats
						iconCls : "statsNode",
						type : "statsNode",
						text : "Stats",
						uiProvider : "col",
						children : [
							{
								iconCls : "statsNode",
								text : "Executions",
								uiProvider : "col",
								description : servlet.stats.executions,
								leaf : true
							},{
								iconCls : "statsNode",
								text : "Errors",
								uiProvider : "col",
								description : servlet.stats.errors,
								leaf : true
							}
						]
					};
					var methodsNode = {				// Create Methods Node
						text : "Methods",
						uiProvider : "col",
						iconCls : "methodNode",
						children : []
					};
					var Mappings = context.getServletMappings(servletName);
					var urlMappings = [];
					for(var k=0;k<Mappings.length;k++) {
						urlMappings.push({
							text : Mappings[k],
							iconCls : "mappingNode",
							uiProvider : "col",
							leaf : true
						});					
					}
					var mappingNode = {
						text : "URL Mappings",
						uiProvider : "col",
						iconCls : "mappingNode",
						children : urlMappings
					};
					for(optionName in servlet.options){	// Run through options
						var option=servlet.options[optionName];
						var params = [];
						if(option.parameters) {
							var parameters = option.parameters;
							for(var k=0;k<parameters.length;k++) {
								var parameter=parameters[k];
								var parameterNode = {
									iconCls : "parameterNode",
									leaf : true,
									uiProvider : "col"
								};
								switch(typeof parameter) {
									case "string":
										parameterNode.text = parameter;
										break;
									case "object":
										parameterNode.text = parameter.name || parameter;
										parameterNode.description = parameter.description || "";
										parameterNode.required = parameter.required || false;
										break;
									default:
										parameterNode.text = parameter;
								}
								params.push(parameterNode);
							};
						};
						var methodNode = {
							type : "servletOption",
							iconCls : "methodNode",
							text : optionName,
							description : "Asynchronous: " + (option.async || false),
							uiProvider : "col"
						}
						if(params.length>0) {
							methodNode.children = [];
							methodNode.children.push({
								text : "Parameters",
								iconCls : "parameterNode",
								uiProvider : "col",
								children : params
							});
						}else{
							methodNode.leaf = true;
						}
						methodsNode.children.push(methodNode);	// Push Method Node to Methods Collection
					}
					servletsNode.push({				// Push Servlets Node
						// id : servletName,
						text : servletName,
						Mappings : Mappings,
						type : "servlet",
						iconCls : "servletNode",
						description : servlet.meta.description,
						uiProvider: "col",
						children : [ 
							{
								text : "Servlet Class",
								description : servlet.meta.servletClass,
								iconCls : "classNode",
								leaf : true,
								uiProvider : "col"
							},
							servletParametersNode, statsNode, methodsNode, mappingNode]
					});
				}
				var sessionChildren = [];
				var arrSessions = context.getSessionManager().adminServices.getSessions();
				for(var j=0;j<arrSessions.length;j++){
					sessionChildren.push({
						text: arrSessions[j].getId(),
						description : "Session",
						iconCls : "sessionNode",
						leaf : true,
						uiProvider : "col"
					});
				}			
				var initParamNode = [];									// Create Context Initialization Param. Node
				var initParamNames = context.getInitParameterNames();	// Get Context Init Parameter Collection
				for(var j=0;j<initParamNames.length;j++) {				// Run through Context Init params
					var ip = context.getInitParameter(initParamNames[j]);
					var leaf = true;
					var children = null;
					if(typeof ip == 'object') {
						leaf = false;
						children = [];
						for(c in ip) children.push({
							text : c,
							iconCls : "attributeNode",
							description : ip[c],
							leaf : true,
							uiProvider: "col"
						});
					}
					initParamNode.push({					// Push Init Param Leaf
						text : initParamNames[j],
						iconCls : "attributeNode",
						description : ip,
						uiProvider: "col",
						leaf : leaf,
						children : children
					});
				}
				var contextNode = {						// Create context Node entry
					id : context.getName(),
					type : "context",
					text : context.getName() + " (" + context.getPath() + ")",
					contextName : context.getName(),
					path : context.getPath(),
					component : context.getName(),
					description : context.getConfig().description,
					uiProvider: "col",
					iconCls : (context.getAdminServices())?"adminNode":"webappNode",
					children : [
						{
							text : "Sessions",
							iconCls : "sessionNode",
							children : (sessionChildren.length>0)?sessionChildren:null,
							leaf : (sessionChildren.length>0)?false:true
						},{
							text : "Init Parameters",
							iconCls : "attributeNode",
							children : initParamNode
						},{
							text : "Servlets",
							iconCls : "servletNode",
							children : servletsNode
						}
					]
				}
				rootNode.push(contextNode);				// Push context Node to Root Node
			}
			rootNode.sort(function(a,b) {
				return a.path.length - b.path.length;
			});
			response.getWriter().write(JSON.stringify(rootNode));	// Write out Treenode JSON
		}
	}
}