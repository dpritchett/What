{
	doGet : {
		async : true,	// Node.JS File i/o is asynchronous, so we should flag this method as such
		method : function(request, response, callback, scope) {
			var writer = response.getWriter();
			var appBase = this.getServletContext().getHostServices().appBase;
			var servletPath = request.getServletPath() || "/";
			var contextPath = request.getContextPath();
			var pathInfo = request.getPathInfo();
			// Init Parameters
			var allowListings = this.getServletConfig().getInitParameter("listings");
			var absolutePath = this.getServletConfig().getInitParameter("absolutePath");
			var createSessions = this.getServletConfig().getInitParameter("createSessions");
			var MIMEPath = "";
			if(!absolutePath) {
				MIMEPath = appBase + "/webapps/" + contextPath + servletPath + pathInfo;
			}else{
				MIMEPath = absolutePath + pathInfo;
			}
			if(createSessions) {
				var session = request.getSession(true);
			}
			var forbidPaths = [
				appBase + "/webapps/" + contextPath + servletPath + "WEB-INF",
				appBase + "/webapps/" + contextPath + servletPath + "META-INF"
			]
			var forbidden = false;
			for(var i=0;i<forbidPaths.length;i++) if(MIMEPath.indexOf(forbidPaths[i]) == 0) forbidden = true;
			if(forbidden){ // Forbid WEB-INF and META-INF listings
				response.setStatus(403);
				response.setHeader("Content-Type", "text/html");
				var template = Utils.getTemplate("403.tmpl");
				template = template.replace("<@message>", "WEB-INF and META-INF listings are forbidden.");
				template = template.replace("<@title>", "WEB-INF and META-INF listings are is forbidden.");
				writer.write(template);
				this.serviceComplete(request, response, callback, scope);
			}else{	// Check MIMEs
				Utils.getMIME({
					modSince : request.getHeader("If-Modified-Since"),
					allowDirectoryListing : allowListings,
					cacheControl : request.getHeader("Cache-Control"),
					path : MIMEPath,
					relPath : pathInfo.split("/")[pathInfo.split("/").length-1],
					scope : this,
					callback: function(MIME) {
						switch(MIME.status) {
							// OK
							case 200:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setHeader("Last-Modified", MIME.modTime);
								response.setOutputStream(MIME.content);
							break;
							// Cache
							case 304:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", "");
							break;
							// Not found
							case 404:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setOutputStream(MIME.content);
							break;
							// All others
							default:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setOutputStream(MIME.content);
						}
						this.serviceComplete(request, response, callback, scope);
					}
				});
			}
		}
	},
	doPost : {
		async : true,	// Node.JS File i/o is asynchronous, so we should flag this method as such
		method : function(request, response, callback, scope) {
			var writer = response.getWriter();
			var appBase = this.getServletContext().getHostServices().appBase;
			var servletPath = request.getServletPath() || "/";
			var contextPath = request.getContextPath();
			var pathInfo = request.getPathInfo();
			// Init Parameters
			var allowListings = this.getServletConfig().getInitParameter("listings");
			var absolutePath = this.getServletConfig().getInitParameter("absolutePath");
			var createSessions = this.getServletConfig().getInitParameter("createSessions");
			var MIMEPath = "";
			if(!absolutePath) {
				MIMEPath = appBase + "/webapps/" + contextPath + servletPath + pathInfo;
			}else{
				MIMEPath = absolutePath + pathInfo;
			}
			if(createSessions) {
				var session = request.getSession(true);
			}
			var forbidPaths = [
				appBase + "/webapps/" + contextPath + servletPath + "WEB-INF",
				appBase + "/webapps/" + contextPath + servletPath + "META-INF"
			]
			var forbidden = false;
			for(var i=0;i<forbidPaths.length;i++) if(MIMEPath.indexOf(forbidPaths[i]) == 0) forbidden = true;
			if(forbidden){ // Forbid WEB-INF and META-INF listings
				response.setStatus(403);
				response.setHeader("Content-Type", "text/html");
				var template = Utils.getTemplate("403.tmpl");
				template = template.replace("<@message>", "WEB-INF and META-INF listings are forbidden.");
				template = template.replace("<@title>", "WEB-INF and META-INF listings are is forbidden.");
				writer.write(template);
				this.serviceComplete(request, response, callback, scope);
			}else{	// Check MIMEs
				Utils.getMIME({
					modSince : request.getHeader("If-Modified-Since"),
					allowDirectoryListing : allowListings,
					cacheControl : request.getHeader("Cache-Control"),
					path : MIMEPath,
					relPath : pathInfo.split("/")[pathInfo.split("/").length-1],
					scope : this,
					callback: function(MIME) {
						switch(MIME.status) {
							// OK
							case 200:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setHeader("Last-Modified", MIME.modTime);
								response.setOutputStream(MIME.content);
							break;
							// Cache
							case 304:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", "");
							break;
							// Not found
							case 404:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setOutputStream(MIME.content);
							break;
							// All others
							default:
								response.setStatus(MIME.status);
								response.setHeader("Content-Type", MIME.mimeType.mimeType);
								response.setOutputStream(MIME.content);
						}
						this.serviceComplete(request, response, callback, scope);
					}
				});
			}
		}
	}
}